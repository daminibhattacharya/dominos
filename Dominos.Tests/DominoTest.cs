namespace Dominos.Tests;

public class DominoTest
{
    [Fact]
    public void BruteForceApproach_ValidDominos_ReturnsCircularChain()
    {
        //Arrange
        int[,] dominos =
        {
            {19, 20},
            {40, 41},
            {77, 78},
            {13, 14},
            {86, 87},
            {52, 53},
            {21, 22},
            {75, 76},
            {42, 43},
            {35, 36},
            {74, 75},
            {67, 68},
            {15, 16},
            {16, 17},
            {26, 27},
            {49, 50},
            {65, 66},
            {58, 59},
            {48, 49},
            {85, 86},
            {3, 4},
            {98, 99},
            {83, 84},
            {28, 29},
            {88, 89},
            {54, 55},
            {25, 26},
            {30, 31},
            {63, 64},
            {62, 63},
            {50, 51},
            {36, 37},
            {45, 46},
            {60, 61},
            {100, 1},
            {22, 23},
            {82, 83},
            {43, 44},
            {57, 58},
            {39, 40},
            {32, 33},
            {31, 32},
            {23, 24},
            {44, 45},
            {46, 47},
            {96, 97},
            {61, 62},
            {55, 56},
            {10, 11},
            {33, 34},
            {24, 25},
            {38, 39},
            {17, 18},
            {69, 70},
            {91, 92},
            {1, 2},
            {87, 88},
            {66, 67},
            {4, 5},
            {92, 93},
            {37, 38},
            {11, 12},
            {71, 72},
            {70, 71},
            {90, 91},
            {29, 30},
            {76, 77},
            {59, 60},
            {2, 3},
            {20, 21},
            {18, 19},
            {34, 35},
            {53, 54},
            {81, 82},
            {93, 94},
            {6, 7},
            {12, 13},
            {94, 95},
            {84, 85},
            {27, 28},
            {95, 96},
            {41, 42},
            {47, 48},
            {73, 74},
            {56, 57},
            {72, 73},
            {99, 100},
            {97, 98},
            {7, 8},
            {64, 65},
            {79, 80},
            {8, 9},
            {5, 6},
            {89, 90},
            {14, 15},
            {80, 81},
            {78, 79},
            {68, 69},
            {9, 10},
            {51, 52}
        };
        //Act
        var result = HelloDomino.bruteForceApproach(dominos);
        //Assert
        Assert.NotNull(result);

    }
    [Fact]
    public void BruteForceApproach_NoValidChain_ReturnsNull()
    {
        // Arrange
        int[,] dominos =
        {
            {19, 20},
            {40, 41},
            {77, 78},
            {13, 14},
            {86, 87},
            {52, 53},
            {21, 22},
            {75, 76},
            {42, 43},
            {35, 36},
            {74, 75},
            {67, 68},
            {15, 16},
            {16, 17},
            {26, 27},
            {49, 50},
            {65, 66},
            {58, 59},
            {48, 49},
            {85, 86},
            {3, 4},
            {98, 99},
            {83, 84},
            {28, 29},
            {88, 89},
            {54, 55},
            {25, 26},
            {30, 31},
            {63, 64},
            {62, 63},
            {50, 51},
            {36, 37},
            {45, 46},
            {60, 61},
            {100, 1},
            {22, 23},
            {82, 83},
            {43, 44},
            {57, 58},
            {39, 40},
            {32, 33},
            {31, 32},
            {23, 24},
            {44, 45},
            {46, 47},
            {96, 97},
            {61, 62},
            {55, 56},
            {10, 11},
            {33, 34},
            {24, 25},
            {38, 39},
            {17, 18},
            {69, 70},
            {91, 92},
            {1, 2},
            {87, 88},
            {66, 67},
            {4, 5},
            {92, 93},
            {37, 38},
            {11, 12},
            {71, 72},
            {70, 71},
            {90, 91},
            {29, 30},
            {76, 77},
            {59, 60},
            {2, 3},
            {20, 21},
            {18, 19},
            {34, 35},
            {53, 54},
            {81, 82},
            {93, 94},
            {6, 7},
            {12, 13},
            {94, 95},
            {84, 85},
            {27, 28},
            {95, 96},
            {41, 42},
            {47, 48},
            {73, 74},
            {56, 57},
            {72, 73},
            {99, 100},
            {97, 98},
            {7, 8},
            {64, 65},
            {79, 80},
            {8, 9},
            {5, 6},
            {14, 15},
            {80, 81},
            {78, 79},
            {68, 69},
            {9, 10},
            {51, 52}
        };

        // Act
        var result = HelloDomino.bruteForceApproach(dominos);

        // Assert
        Assert.Null(result);
    }
    [Fact]
    public void BruteForceWithDictionary_ValidDominos_ReturnsCircularChain()
    {
        //Arrange
        int[,] dominos =
        {
            {19, 20},
            {40, 41},
            {77, 78},
            {13, 14},
            {86, 87},
            {52, 53},
            {21, 22},
            {75, 76},
            {42, 43},
            {35, 36},
            {74, 75},
            {67, 68},
            {15, 16},
            {16, 17},
            {26, 27},
            {49, 50},
            {65, 66},
            {58, 59},
            {48, 49},
            {85, 86},
            {3, 4},
            {98, 99},
            {83, 84},
            {28, 29},
            {88, 89},
            {54, 55},
            {25, 26},
            {30, 31},
            {63, 64},
            {62, 63},
            {50, 51},
            {36, 37},
            {45, 46},
            {60, 61},
            {100, 1},
            {22, 23},
            {82, 83},
            {43, 44},
            {57, 58},
            {39, 40},
            {32, 33},
            {31, 32},
            {23, 24},
            {44, 45},
            {46, 47},
            {96, 97},
            {61, 62},
            {55, 56},
            {10, 11},
            {33, 34},
            {24, 25},
            {38, 39},
            {17, 18},
            {69, 70},
            {91, 92},
            {1, 2},
            {87, 88},
            {66, 67},
            {4, 5},
            {92, 93},
            {37, 38},
            {11, 12},
            {71, 72},
            {70, 71},
            {90, 91},
            {29, 30},
            {76, 77},
            {59, 60},
            {2, 3},
            {20, 21},
            {18, 19},
            {34, 35},
            {53, 54},
            {81, 82},
            {93, 94},
            {6, 7},
            {12, 13},
            {94, 95},
            {84, 85},
            {27, 28},
            {95, 96},
            {41, 42},
            {47, 48},
            {73, 74},
            {56, 57},
            {72, 73},
            {99, 100},
            {97, 98},
            {7, 8},
            {64, 65},
            {79, 80},
            {8, 9},
            {5, 6},
            {89, 90},
            {14, 15},
            {80, 81},
            {78, 79},
            {68, 69},
            {9, 10},
            {51, 52}
        };
        //Act
        var result = HelloDomino.dictionaryBasedApproach(dominos);
        //Assert
        Assert.NotNull(result);
    }
    [Fact]
    public void BruteForceWithDictionary_NoValidChain_ReturnsNull()
    {
        // Arrange
        int[,] dominos =
        {
            {19, 20},
            {40, 41},
            {77, 78},
            {13, 14},
            {86, 87},
            {52, 53},
            {21, 22},
            {75, 76},
            {42, 43},
            {35, 36},
            {74, 75},
            {67, 68},
            {15, 16},
            {16, 17},
            {26, 27},
            {49, 50},
            {65, 66},
            {58, 59},
            {48, 49},
            {85, 86},
            {3, 4},
            {98, 99},
            {83, 84},
            {28, 29},
            {88, 89},
            {54, 55},
            {25, 26},
            {30, 31},
            {63, 64},
            {62, 63},
            {50, 51},
            {36, 37},
            {45, 46},
            {60, 61},
            {100, 1},
            {22, 23},
            {82, 83},
            {43, 44},
            {57, 58},
            {39, 40},
            {32, 33},
            {31, 32},
            {23, 24},
            {44, 45},
            {46, 47},
            {96, 97},
            {61, 62},
            {55, 56},
            {10, 11},
            {33, 34},
            {24, 25},
            {38, 39},
            {17, 18},
            {69, 70},
            {91, 92},
            {1, 2},
            {87, 88},
            {66, 67},
            {4, 5},
            {92, 93},
            {37, 38},
            {11, 12},
            {71, 72},
            {70, 71},
            {90, 91},
            {29, 30},
            {76, 77},
            {59, 60},
            {2, 3},
            {20, 21},
            {18, 19},
            {34, 35},
            {53, 54},
            {81, 82},
            {93, 94},
            {6, 7},
            {12, 13},
            {94, 95},
            {84, 85},
            {27, 28},
            {95, 96},
            {41, 42},
            {47, 48},
            {73, 74},
            {56, 57},
            {72, 73},
            {99, 100},
            {97, 98},
            {7, 8},
            {64, 65},
            {79, 80},
            {8, 9},
            {5, 6},
            {14, 15},
            {80, 81},
            {78, 79},
            {68, 69},
            {9, 10},
            {51, 52}
        };

        // Act
        var result = HelloDomino.dictionaryBasedApproach(dominos);

        // Assert
        Assert.Null(result);
    }
    [Fact]
    public void GraphDFSApproach_ValidChain_ReturnsCircularChain()
    {
        //Arrange
        Dictionary<int, List<int>> dominos = new Dictionary<int, List<int>>
        {
            { 1, new List<int> { 2, 5} },
            { 2, new List<int> { 1, 3 } },
            { 3, new List<int> { 2, 4 } },
            { 4, new List<int> { 3, 5 } },
            { 5, new List<int> { 4, 1 } }
        };
        //Act
        var result = HelloDomino.graphBasedDFSApproach(dominos);
        //Assert
        Assert.NotNull(result);
    }
    [Fact]
    public void GraphDFSApproach_NoValidChain_ReturnsNull()
    {
        //Arrange
        Dictionary<int, List<int>> dominos = new Dictionary<int, List<int>>
        {
            { 1, new List<int> { 2 } },
            { 2, new List<int> { 1 } },
            
            { 3, new List<int> { 4 } },
            { 4, new List<int> { 3 } },
            
            { 5, new List<int>() }
        };
        //Act
        var result = HelloDomino.graphBasedDFSApproach(dominos);
        //Assert
        Assert.Null(result);
    }

}
